import PropTypes from "prop-types";
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
    Button,
    Card,
    CardBody,
    CardHeader,
    Container,
    Form,
    FormFeedback,
    FormGroup,
    Input,
    Label,
    Spinner
} from "reactstrap";
import '../../assets/scss/custom.scss';
import '../../config';
import { ErrorMessage, useFormik } from "formik";
import * as Yup from "yup";
import Lovv2 from "common/Lovv2";
import { deleteEmployeeOf, editEmployeeOf, getCandidateData, getCandidateListData, getKeywordListData, getLocationListData, resetMessage } from "store/actions";
import DatePicker from "react-datepicker";
import moment from "moment";
import { format } from 'date-fns';
import "react-datepicker/dist/react-datepicker.css";
import { getCandidateLov } from "store/lov/actions";

const EditEmployeeOf = (props) => {

    const dispatch = useDispatch()

    const [lovOneRender, setLovOneRender] = useState(0)

    const [appCandidateSearchLov, setAppCandidateSearchLov] = useState("");
    const [appLovParam, setAppLovParam] = useState({});

    const [loadingSpinner, setLoadingSpinner] = useState(false)
    const [filterVal, setFilterVal] = useState("")

    const appCandidateData = useSelector((state) => state.employeeOfMonYeaReducer.respGetCandidate);
    const appLocationListData = useSelector((state) => state.employeeOfMonYeaReducer.respGetLocationList);

    useEffect(() => {
        dispatch(resetMessage())
    }, [dispatch])

    const formatDate = (date) => {
        if (date) {
            // Check if the input date is already in "yyyy-mm-dd" format
            const isAlreadyFormatted = /^\d{4}-\d{2}-\d{2}$/.test(date);

            if (!isAlreadyFormatted) {
                // If not, proceed with formatting
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }
        }
        return date; // Return the input date if already formatted or if it's falsy
    };

    const appEditEmployeeValidInput = useFormik({
        enableReinitialize: true,

        initialValues: {
            memberId: '',
            keywordName: '',
            locationId: '',
            flag: '',
            periodFrom: '',
            periodTo: '',
            star: '',
            description: '',
            memberName: '',
        },
        validationSchema: Yup.object().shape({
            memberId: Yup.string().required("Wajib diisi"),
            keywordName: Yup.string().required("Wajib diisi"),
            flag: Yup.string().required("Wajib diisi"),
            periodFrom: Yup.string().required("Wajib diisi"),
            periodTo: Yup.string().required("Wajib diisi"),
        }),

        onSubmit: (values) => {
            props.setAppEmployeeOfMonYeaMsg("")
            let dateFrom = formatDate(values.periodFrom)
            let dateTo = formatDate(values.periodTo)
            dispatch(editEmployeeOf({
                awardId: props.appEmployeeOfMonYeaData.awardId,
                locationId: values.locationId,
                periodFrom: dateFrom,
                periodTo: dateTo,
                memberId: values.memberId,
                description: values.description,
            }))
            props.setAppEmployeeOfMonYeaMsg('')
        }
    });

    useEffect(() => {
        if (props.appEditEmployeeOfMonYea) {
            setAppCandidateSearchLov("")
            dispatch(getKeywordListData())
            dispatch(getLocationListData())
            dispatch(getCandidateData({ awardId: props.appEmployeeOfMonYeaData.awardId }))
            setLovOneRender(0)
            setLoadingSpinner(true)
        } else {
            appEditEmployeeValidInput.resetForm()
            setLovOneRender(0)
        }
    }, [props.appEditEmployeeOfMonYea])

    useEffect(() => {
        if (appCandidateData.status === '1') {
            appEditEmployeeValidInput.setFieldValue('memberId', appCandidateData?.data?.result.memberId)
            appEditEmployeeValidInput.setFieldValue('keywordName', appCandidateData?.data?.result.keywordName)
            appEditEmployeeValidInput.setFieldValue('flag', appCandidateData?.data?.result.flag)
            appEditEmployeeValidInput.setFieldValue('locationId', appCandidateData?.data?.result.locationId)
            appEditEmployeeValidInput.setFieldValue('periodFrom', appCandidateData?.data?.result.periodFrom)
            appEditEmployeeValidInput.setFieldValue('periodTo', appCandidateData?.data?.result.periodTo)
            appEditEmployeeValidInput.setFieldValue('star', appCandidateData?.data?.result.star)
            appEditEmployeeValidInput.setFieldValue('description', appCandidateData?.data?.result.description)
            setAppCandidateSearchLov(appCandidateData?.data?.result.memberName)
            setLoadingSpinner(false)
        }

    }, [appCandidateData])


    useEffect(() => {

        if (appEditEmployeeValidInput.values.periodFrom === null) {
            appEditEmployeeValidInput.setFieldValue('periodFrom', '')
        }
        if (appEditEmployeeValidInput.values.periodTo === null) {
            appEditEmployeeValidInput.setFieldValue('periodTo', '')
        }

        const formattedDateFrom = formatDate(appEditEmployeeValidInput.values.periodFrom);
        const formattedDateTo = formatDate(appEditEmployeeValidInput.values.periodTo);

        setAppLovParam({
            periodFrom: formattedDateFrom,
            periodTo: formattedDateTo,
            locationId: appEditEmployeeValidInput.values.locationId,
        });

        if (!formattedDateFrom || !formattedDateTo || !appEditEmployeeValidInput.values.locationId) {
            appEditEmployeeValidInput.setFieldValue('memberId', '')
            // setAppCandidateSearchLov("")
        }

    }, [appEditEmployeeValidInput.values.periodFrom, appEditEmployeeValidInput.values.periodTo, appEditEmployeeValidInput.values.locationId]);


    const appLovCandidateListColumns = [
        {
            dataField: "memberId",
            text: "Employee No",
            sort: true,
            headerStyle: { textAlign: 'center' },
        },
        {
            dataField: "memberName",
            text: "Employee Name",
            sort: true,
            headerStyle: { textAlign: 'center' },
        },
        {
            dataField: "deptName",
            text: "Department Name",
            sort: true,
            headerStyle: { textAlign: 'center' },
        },
        {
            dataField: "star",
            text: "Jumlah",
            sort: true,
            headerStyle: { textAlign: 'center' },
        },
    ]

    const dateChanger = (name, selectedDate) => {

        if (name === 'from') {
            appEditEmployeeValidInput.setFieldValue('periodFrom', selectedDate);

        } else if (name === 'to') {
            appEditEmployeeValidInput.setFieldValue('periodTo', selectedDate);
        }

    };

    const appCallBackEmployee = (row) => {
        appEditEmployeeValidInput.setFieldValue("memberId", row.memberId)
        appEditEmployeeValidInput.setFieldValue("star", row.star)
    }

    useEffect(() => {
        if (!appEditEmployeeValidInput.values.periodFrom || !appEditEmployeeValidInput.values.periodTo) {
            setAppCandidateSearchLov("Mohon isi periode terlebih dahulu...")
        }
    }, [appEditEmployeeValidInput.values.periodFrom, appEditEmployeeValidInput.values.periodTo])

    return (
        <Container
            style={{ display: props.appEditEmployeeOfMonYea ? 'block' : "none" }}
            fluid
        >
            <Card style={{ marginBottom: 0 }}>
                <CardHeader>
                    <span className="mdi mdi-account-plus"></span> Ubah Penghargaan Karyawan
                </CardHeader>
                <CardBody className="bg-light" style={{ paddingTop: "1rem", paddingBottom: "1rem", margin: 0, border: "1px solid #BBB" }}>
                    <Form
                        onSubmit={(e) => {
                            e.preventDefault();
                            appEditEmployeeValidInput.handleSubmit();
                            return false
                        }}
                    >
                        <FormGroup>
                            <div
                                className="col-4"
                            >
                                <div
                                    className="d-flex flex-row col-10 align-items-center py-2 justify-content-between"
                                >
                                    <div className="col-4">
                                        <Label
                                            style={{
                                                marginTop: "4px",
                                                whiteSpace: 'nowrap',
                                            }}
                                        >
                                            Periode/Year <span className="text-danger"> *</span>
                                        </Label>
                                    </div>
                                    <div
                                        className="col-8"
                                    >
                                        <div
                                            style={{
                                                display: "flex",
                                                flexDirection: "row",
                                                gap: "12px",
                                            }}
                                        >
                                            <label htmlFor="monthRadio1">
                                                <Input
                                                    disabled
                                                    id="monthRadio1"
                                                    type="radio"
                                                    checked={appEditEmployeeValidInput.values.flag === "month"}
                                                    name="searchOption"
                                                    value="month"
                                                    onChange={() =>
                                                        appEditEmployeeValidInput.setFieldValue("flag", "month")
                                                    }
                                                />{" "}
                                                Month
                                            </label>
                                            <label htmlFor="yearRadio1">
                                                <Input
                                                    disabled
                                                    id="yearRadio1"
                                                    type="radio"
                                                    checked={appEditEmployeeValidInput.values.flag === "year"}
                                                    name="searchOption"
                                                    value="year"
                                                    onChange={() => appEditEmployeeValidInput.setFieldValue("flag", "year")}
                                                />{" "}
                                                Year
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div
                                    className="d-flex flex-row col-10 align-items-center py-2 justify-content-between"
                                >
                                    <div className="col-4">
                                        <Label
                                            style={{
                                                marginTop: "4px",
                                                whiteSpace: 'nowrap',
                                            }}
                                        >
                                            keywordName <span className="text-danger"> *</span>
                                        </Label>
                                    </div>
                                    <div className="col-8">
                                        <Input
                                            disabled
                                            type="select"
                                            style={{ color: '#495057' }}
                                            value={appEditEmployeeValidInput.values.keywordName}
                                            onChange={(e) =>
                                                appEditEmployeeValidInput.setFieldValue("keywordName", e.target.value)
                                            }
                                            invalid={
                                                appEditEmployeeValidInput.touched.keywordName && appEditEmployeeValidInput.errors.keywordName
                                                    ? true : false
                                            }
                                        >
                                            <option value={appEditEmployeeValidInput.values.keywordName}>
                                                {appEditEmployeeValidInput.values.keywordName}
                                            </option>
                                        </Input>
                                        <FormFeedback type="invalid">{appEditEmployeeValidInput.errors.keywordName}</FormFeedback>
                                    </div>
                                </div>
                                <div
                                    className="d-flex flex-row col-10 align-items-center py-2 justify-content-between"
                                >
                                    <div className="col-4">
                                        <Label
                                            style={{
                                                marginTop: "4px",
                                                whiteSpace: 'nowrap',
                                            }}
                                        >
                                            Lokasi <span className="text-danger"> *</span>
                                        </Label>
                                    </div>
                                    <div className="col-8">
                                        <Input
                                            type="select"
                                            value={appEditEmployeeValidInput.values.locationId}
                                            onChange={(e) => {
                                                appEditEmployeeValidInput.setFieldValue("locationId", e.target.value)
                                                appEditEmployeeValidInput.setFieldValue("memberId", '')
                                                appEditEmployeeValidInput.setFieldValue("memberName", '')
                                                appEditEmployeeValidInput.setFieldValue("star", '')
                                                setAppCandidateSearchLov("")
                                            }}
                                            invalid={
                                                appEditEmployeeValidInput.touched.locationId && appEditEmployeeValidInput.errors.locationId
                                                    ? true : false
                                            }
                                        >
                                            {
                                                appLocationListData?.data?.list.map((item, index) => (
                                                    <option key={index} value={item.locationId}>
                                                        {item.locationName}
                                                    </option>
                                                ))
                                            }
                                        </Input>
                                        <FormFeedback type="invalid">{appEditEmployeeValidInput.errors.locationId}</FormFeedback>
                                    </div>
                                </div>

                                <div
                                    className="d-flex flex-row col-10 align-items-center py-2 justify-content-between"
                                >

                                    <div className="col-4">
                                        <Label
                                            style={{
                                                marginTop: "4px",
                                                whiteSpace: 'nowrap',
                                            }}
                                        >
                                            Periode From <span className="text-danger"> *</span>
                                        </Label>
                                    </div>
                                    <div className="col-8">
                                        <div className="col-6">
                                            <DatePicker
                                                className={`form-control ${appEditEmployeeValidInput.touched.periodFrom && appEditEmployeeValidInput.errors.periodFrom ? 'is-invalid' : ''}`}
                                                wrapperClassName="customDatePicker"
                                                maxDate={appEditEmployeeValidInput.values.periodTo && new Date(appEditEmployeeValidInput.values.periodTo)}
                                                selected={appEditEmployeeValidInput.values.periodFrom ? new Date(appEditEmployeeValidInput.values.periodFrom) : ''}
                                                onChange={(tglMulai) =>
                                                    dateChanger('from', tglMulai ? tglMulai : null)
                                                }
                                                isClearable={appEditEmployeeValidInput.values.periodFrom === '' ? false : true}
                                                dateFormat="yyyy-MM-dd"
                                                ariaInvalid={
                                                    appEditEmployeeValidInput.touched.periodFrom && appEditEmployeeValidInput.errors.periodFrom
                                                        ? true : false
                                                }
                                            />
                                            {appEditEmployeeValidInput.touched.periodFrom && appEditEmployeeValidInput.errors.periodFrom && (
                                                <div id="date-invalid">{appEditEmployeeValidInput.errors.periodFrom}</div>
                                            )}
                                        </div>
                                    </div>
                                </div>
                                <div
                                    className="d-flex flex-row col-10 align-items-center py-2 justify-content-between"
                                >

                                    <div className="col-4">
                                        <Label
                                            style={{
                                                marginTop: "4px",
                                                whiteSpace: 'nowrap',
                                            }}
                                        >
                                            Periode To <span className="text-danger"> *</span>
                                        </Label>
                                    </div>
                                    <div className="col-8">
                                        <div className="col-6">
                                            <DatePicker
                                                className={`form-control ${appEditEmployeeValidInput.touched.periodTo && appEditEmployeeValidInput.errors.periodTo ? 'is-invalid' : ''}`}
                                                wrapperClassName="customDatePicker"
                                                minDate={appEditEmployeeValidInput.values.periodFrom && new Date(appEditEmployeeValidInput.values.periodFrom)}
                                                selected={appEditEmployeeValidInput.values.periodTo ? new Date(appEditEmployeeValidInput.values.periodTo) : ''}
                                                onChange={(tglSelesai) =>
                                                    dateChanger('to', tglSelesai ? tglSelesai : null)
                                                }
                                                isClearable={appEditEmployeeValidInput.values.periodTo === '' ? false : true}
                                                dateFormat="yyyy-MM-dd"
                                                ariaInvalid={
                                                    appEditEmployeeValidInput.touched.periodTo && appEditEmployeeValidInput.errors.periodTo
                                                        ? true : false
                                                }
                                            />
                                            {appEditEmployeeValidInput.touched.periodTo && appEditEmployeeValidInput.errors.periodTo && (
                                                <div id="date-invalid">{appEditEmployeeValidInput.errors.periodTo}</div>
                                            )}
                                        </div>
                                    </div>
                                </div>
                                <div
                                    className="d-flex flex-row col-10 align-items-center py-2 justify-content-between"
                                >

                                    <div className="col-4">
                                        <Label
                                            style={{
                                                marginTop: "4px",
                                                whiteSpace: 'nowrap',
                                            }}
                                        >
                                            Nama Karyawan <span className="text-danger"> *</span>
                                        </Label>
                                    </div>
                                    <div className="col-8">
                                        <Lovv2
                                            title="Karyawan"
                                            keyFieldData="memberId"
                                            columns={appLovCandidateListColumns}
                                            getData={getCandidateLov}
                                            pageSize={10}
                                            callbackFunc={appCallBackEmployee}
                                            defaultSetInput="memberName"
                                            invalidData={appEditEmployeeValidInput}
                                            fieldValue="memberName"
                                            stateSearchInput={appCandidateSearchLov}
                                            stateSearchInputSet={setAppCandidateSearchLov}
                                            touchedLovField={appEditEmployeeValidInput.touched.memberId}
                                            errorLovField={appEditEmployeeValidInput.errors.memberId}
                                            pParam={appLovParam}
                                        />
                                    </div>
                                </div>
                                <div
                                    className="d-flex flex-row col-10 align-items-center py-2 justify-content-between"
                                >

                                    <div className="col-4">
                                        <Label
                                            style={{
                                                marginTop: "4px",
                                                whiteSpace: 'nowrap',
                                            }}
                                        >
                                            Jumlah Bintang <span className="text-danger"> *</span>
                                        </Label>
                                    </div>
                                    <div className="col-8">
                                        <Input
                                            disabled
                                            value={appEditEmployeeValidInput.values.star}
                                        />
                                    </div>
                                </div>
                                <div
                                    className="d-flex flex-row col-10 align-items-center py-2 justify-content-between"
                                >

                                    <div className="col-4">
                                        <Label
                                            style={{
                                                marginTop: "4px",
                                                whiteSpace: 'nowrap',
                                            }}
                                        >
                                            Deskripsi
                                        </Label>
                                    </div>
                                    <div className="col-8">
                                        <Input
                                            type="textarea"
                                            value={appEditEmployeeValidInput.values.description}
                                            onChange={(e) => appEditEmployeeValidInput.setFieldValue('description', e.target.value)}
                                        />
                                    </div>
                                </div>
                                <div
                                    className="d-flex flex-row col-10 align-items-center py-2 justify-content-between"
                                >
                                    <div className="col-4">
                                        <Label
                                            style={{
                                                marginTop: "4px",
                                                whiteSpace: 'nowrap',
                                            }}
                                        >
                                        </Label>
                                    </div>
                                    <div className="col-8">
                                        <Button
                                            type="submit"
                                        >
                                            Submit
                                        </Button>
                                    </div>
                                </div>

                            </div>
                        </FormGroup>
                    </Form>
                </CardBody>
            </Card>
            <Button
                className="btn btn-danger my-3"
                onClick={() => {
                    props.setAppEmployeeOfMonYea(true)
                    props.setAppEditEmployeeOfMonYea(false)

                }}
            >
                <span className="mdi mdi-arrow-left" />
                &nbsp;Kembali
            </Button>
            <div className="spinner-wrapper" style={{ display: loadingSpinner ? "block" : "none", zIndex: "9999", position: "fixed", top: "0", right: "0", width: "100%", height: "100%", backgroundColor: "rgba(255, 255, 255, 0.5)", opacity: "1" }}>
                <Spinner style={{ padding: "24px", display: "block", position: "fixed", top: "42.5%", right: "50%" }} color="primary" />
            </div>
        </Container >
    );
};

EditEmployeeOf.propTypes = {
    appEditEmployeeOfMonYea: PropTypes.any,
    setAppEmployeeOfMonYea: PropTypes.any,
    setAppEditEmployeeOfMonYea: PropTypes.any,
    setAppEmployeeOfMonYeaMsg: PropTypes.any,
    appEmployeeOfMonYeaData: PropTypes.any,
}

export default EditEmployeeOf;
